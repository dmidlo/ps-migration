#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!mermaid

classDiagram
    direction LR
    class Add-DbDocument {
        +Add-DbDocument(LiteDB.LiteDatabase Database, string Collection, PSCustomObject Data, string[] IgnoreFields, switch NoVersionUpdate, switch NoTimestampUpdate)
    }

    %% Group: Hash & Versioning Helpers
    class Get-DataHash {
        +Get-DataHash(PSCustomObject DataObject, string[] FieldsToIgnore)
    }
    class Get-DbDocumentByHash {
        +Get-DbDocumentByHash(string Hash, LiteDB.LiteDatabase Database, string Collection)
    }
    class Get-DbDocumentVersion {
        +Get-DbDocumentVersion(string Hash, LiteDB.LiteDatabase Database, string Collection, bool Latest)
    }
    class Get-DbDocumentVersionsByGuid {
        +Get-DbDocumentVersionsByGuid(string Guid, LiteDB.LiteDatabase Database, string Collection)
    }
    class New-DbHashRef {
        +New-DbHashRef(PSCustomObject DbDocument, string Collection, string RefCollection)
    }

    %% Group: LiteDB Operations
    class Add-LiteData {
        +Add-LiteData(PSCustomObject Data, string Collection)
    }
    class Set-LiteData {
        +Set-LiteData(PSCustomObject Data, string Collection)
    }

    %% Dependencies
    Add-DbDocument --> Get-DataHash : "Computes Hash"
    Add-DbDocument --> Get-DbDocumentByHash : "Checks for existing record"
    Add-DbDocument --> Get-DbDocumentVersion : "Finds latest version"
    Add-DbDocument --> Get-DbDocumentVersionsByGuid : "Retrieves version count"
    Add-DbDocument --> New-DbHashRef : "Handles reference updates"

    Add-DbDocument --> Add-LiteData : "Initial insert to LiteDB"
    Add-DbDocument --> Set-LiteData : "Final document update"

#!mermaid

graph TD
    A[Start Add-DbDocument] -->|Check if Guid exists| B{Guid Present?}
    B -- No --> B1[Generate New Guid]
    B -- Yes --> C[Proceed with Existing Guid]
    
    C -->|Compute Hash| D[Call Get-DataHash]
    D -->|Check if Record Exists| E{Existing Hash Found?}
    
    E -- Yes --> F[Get Latest Version]
    F -->|Check for $Ref| G{Contains Reference?}
    G -- Yes --> H[Return Latest Version]
    G -- No --> I{Hash Matches Latest?}
    I -- Yes --> J[Skip Insertion, Return Existing]
    I -- No --> K[Create Reference, Proceed]
    
    E -- No --> L[Insert Partial Document]
    L -->|Retrieve Inserted Document| M[Call Get-DbDocumentByHash]
    M -->|Check _id| N{Valid _id?}
    N -- No --> O[Throw Error: Insertion Failed]
    N -- Yes --> P[Update Data with _id]
    
    P -->|Update Metadata| Q[Update UTC_Created, UTC_Updated]
    Q -->|Update Version| R[Get Version Count]
    R -->|Update Final Document| S[Call Set-LiteData]
    S --> T[Return Inserted Document]

#!mermaid

stateDiagram
    [*] --> ValidateData
    ValidateData --> ComputeHash
    ComputeHash --> CheckForDuplicate
    CheckForDuplicate -->|Exists| FetchLatestVersion
    CheckForDuplicate -->|New| InsertStub
    FetchLatestVersion -->|$Ref Found| ResolveReference
    FetchLatestVersion -->|Exact Match| SkipInsertion
    ResolveReference --> ReturnExisting
    SkipInsertion --> ReturnExisting
    InsertStub --> RetrieveInserted
    RetrieveInserted -->|Valid _id| UpdateMetadata
    RetrieveInserted -->|Invalid _id| ThrowError
    UpdateMetadata --> UpdateVersion
    UpdateVersion --> FinalUpdate
    FinalUpdate --> ReturnInserted
    ReturnInserted --> [*]
