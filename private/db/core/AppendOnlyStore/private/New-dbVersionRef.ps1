function New-DbVersionRef {
    param(
        [Parameter(Mandatory)]
        $DbDocument,

        [Parameter(Mandatory)]
        $Collection,

        [Parameter(Mandatory)]
        $RefCollection
    )

    # I know this is weird, but it's the way refs work (just) for now.
    # So, The $Collection and $RefCollection input params make sense 
    # in as far as naming regarding domain context (LiteDB Convention 
    # translated to powershell param naming).  The moniker 'Ref' should
    # signify the reference collection.  We have a naming conflict when
    # we look at the properties of RefBundleId and RefCol, which are used
    # for 'this DbRef's Bundle and home colletion.  Bundle is a reference to 
    # the application object's version collection, $VersionId is a reference
    # to the member of that object's version collection, and again, 
    # according to LiteDB convention, $Ref is reserved for the target
    # collection to reference. $BundleId refs generated by New-DbBundleRef
    # are subject to the self same, $BundleId, and BundleRefs generated there
    # point to Application Object Version collections, but RefBundleId and
    # RefCol treated the same in that function's object.
    #
    # If you're using the function RefCollection sticks to the domain
    # convetion, so should you.
    #
    # If you're maintaining the function, internally the prefex of
    # `Ref` indicates a property owned by `this` DbRef object.
    $out = [PSCustomObject]@{
        RefBundleId = [Guid]::NewGuid()
        RefCol = $Collection.Name
        BundleId = $DbDocument.BundleId
        "`$VersionId"  = $DbDocument.VersionId
        "`$Ref" = $RefCollection.Name
    }
    $ContentMark = (Get-DataHash -DataObject $out -FieldsToIgnore @('_id', 'ContentMark', 'VersionId', 'Count', 'Length')).Hash
    $VersionId = (Get-DataHash -DataObject @{ContentMark = $ContentMark; BundleId = $out.BundleId} -FieldsToIgnore @('none')).Hash
    $out = ($out | Add-Member -MemberType NoteProperty -Name "ContentMark" -Value $ContentMark -Force -PassThru)
    $out = ($out | Add-Member -MemberType NoteProperty -Name "VersionId" -Value $VersionId -Force -PassThru)
    
    return $out
}